#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <csignal>


const int PORT = 8080;

const int BUFFER_SIZE = 1024;


const std::string LOG_FILE = "server.log";


const std::vector<std::string> BLOCKED_ADDRESSES = {
    "192.168.0.1",
    "127.0.0.1"
};


void handleCtrlC(int signal)
{
    std::cout << "Server terminated by user." << std::endl;
    exit(0);
}


void handleRequest(int clientSocket)
{
    char buffer[BUFFER_SIZE];
    std::memset(buffer, 0, BUFFER_SIZE);

    int bytesRead = read(clientSocket, buffer, BUFFER_SIZE - 1);
    if (bytesRead < 0)
    {
        std::cerr << "Error reading from socket." << std::endl;
        close(clientSocket);
        return;
    }

    
    struct sockaddr_in clientAddr;
    socklen_t clientAddrLen = sizeof(clientAddr);
    getpeername(clientSocket, (struct sockaddr*)&clientAddr, &clientAddrLen);
    std::string clientAddress = inet_ntoa(clientAddr.sin_addr);

    if (std::find(BLOCKED_ADDRESSES.begin(), BLOCKED_ADDRESSES.end(), clientAddress) != BLOCKED_ADDRESSES.end())
    {
        std::cout << "Access denied for client with IP: " << clientAddress << std::endl;
        close(clientSocket);
        return;
    }

  
    std::ofstream logFile(LOG_FILE, std::ios::app);
    if (logFile.is_open())
    {
        logFile << "Client IP: " << clientAddress << std::endl;
        logFile << "Request:\n" << buffer << std::endl;
        logFile.close();
    }
    else
    {
        std::cerr << "Error opening log file." << std::endl;
    }

    
    std::string response = "HTTP/1.1 200 OK\r\nContent-Length: 12\r\n\r\nHello, World!";
    write(clientSocket, response.c_str(), response.length());

    
    close(clientSocket);
}

int main()
{
   
    int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket < 0)
    {
        std::cerr << "Error creating socket." << std::endl;
        return 1;
    }

   
    int reuseAddr = 1;
    if (setsockopt(serverSocket, SOL_SOCKET, SO_REUSEADDR, &reuseAddr, sizeof(reuseAddr)) < 0)
    {
        std::cerr << "Error setting socket options." << std::endl;
        return 1;
    }

    struct sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(PORT);

    if (bind(serverSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0)
    {
        std::cerr << "Error binding socket." << std::endl;
        return 1;
    }

  
    if (listen(serverSocket, 5) < 0)
    {
        std::cerr << "Error listening on socket." << std::endl;
        return 1;
    }
    struct sigaction sigIntHandler{};
    sigIntHandler.sa_handler = handleCtrlC;
    sigemptyset(&sigIntHandler.sa_mask);
    sigaction(SIGINT, &sigIntHandler, nullptr);

    std::cout << "Server running on port " << PORT << std::endl;

   
    while (true)
    {
        struct sockaddr_in clientAddr{};
        socklen_t clientAddrLen = sizeof(clientAddr);

      
        int clientSocket = accept(serverSocket, (struct sockaddr*)&clientAddr, &clientAddrLen);
        if (clientSocket < 0)
        {
            std::cerr << "Error accepting connection." << std::endl;
            continue;
        }

       
        pid_t pid = fork();
        if (pid < 0)
        {
            std::cerr << "Error forking process." << std::endl;
            close(clientSocket);
            continue;
        }
        else if (pid == 0)
        {
            close(serverSocket);
            handleRequest(clientSocket);
            exit(0);
        }
        else
        {
            
            close(clientSocket);
        }
    }

   
    close(serverSocket);

    return 0;
}
